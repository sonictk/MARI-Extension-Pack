#version 330

////////////////////////////////////////////////////////////////////////////////
// Voronoi Function Suite
// Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: JK_VoronoiSuite.glslc
// Description: Multiple Voronoi Based Functions
////////////////////////////////////////////////////////////////////////////////
// Author: Jens Kafitz | Mari Ideascale
// Web: www.campi3d.com
// Web: www.mari.ideascale.com
// Email: MariIdeas@campi3d.com
////////////////////////////////////////////////////////////////////////////////
// Modified Date: August 12, 2014
////////////////////////////////////////////////////////////////////////////////
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////







// forward declaration from other files
void voronoi(vec3 position, float jitterD, int distype, out float f1, out float f2, out vec3 pos1, out vec3 pos2, out vec3 f1cell, out vec3 f2cell);
float smoothVfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale, float freqOffset);
vec3 translate( vec3 P, vec3 trans);
float boxStep(float low, float high, float value);


// ------------------------------------------------------------------------


vec4 voronoi_popcorn(

				vec3 position,
				float lrg_Shp_Itr,
				float sml_Shp_Itr,
				float lrg_Shp_Scale,
				float sml_Shp_Scale,
				float lrg_Shp_Amp,
				float sml_Shp_Amp,
				float width,
				int distSet

				)


	{


		
		float Offset_X, Offset_Y, Offset_Z;


		{ 


		  vec3 pos_offset_big = position / vec3(lrg_Shp_Scale);
		
		  Offset_X = lrg_Shp_Amp * smoothVfBm(pos_offset_big,lrg_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		  pos_offset_big = translate(pos_offset_big,vec3(-1 * (1000/3)));
		  Offset_Y = lrg_Shp_Amp * smoothVfBm(pos_offset_big,lrg_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		  pos_offset_big = translate(pos_offset_big,vec3(-1 * (1000/3)));
		  Offset_Z = lrg_Shp_Amp * smoothVfBm(pos_offset_big,lrg_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		}
    

	
		{ 

		  vec3 pos_offset_little = position / vec3(sml_Shp_Scale);
		
		  Offset_X += sml_Shp_Amp * smoothVfBm(pos_offset_little,sml_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		  pos_offset_little = translate(pos_offset_little,vec3(-1 * (1000/3)));
		  Offset_Y += sml_Shp_Amp * smoothVfBm(pos_offset_little,sml_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		  pos_offset_little = translate(pos_offset_little,vec3(-1 * (1000/3)));
		  Offset_Z += sml_Shp_Amp * smoothVfBm(pos_offset_little,sml_Shp_Itr,4.0,0.2,1.0,0.2,0.2);

		}

		vec3 VeinOffsetPoint = position + vec3(Offset_X,Offset_Y,Offset_Z);

		

	    // cell function outputs
	    float jitter = 1.0;
	    float f1,f2; vec3 cellout, cellmod;
	    vec3 pos1,pos2,f1cell,f2cell;
	    float stepSize = 0.4;
	   
	    // cellular function
	    voronoi(VeinOffsetPoint,jitter,distSet,f1,f2,pos1,pos2,f1cell,f2cell);


		float lines_thin_A = smoothstep(0.0,width,(f1)/2);
		float lines_thin_B = smoothstep(0.0,width,(f2)/2);
	   //  float lines_thin_C = smoothstep(0.0,width,(f1));
	   float lines_thin_C = width * f1;
	    float lines_thin_D = width * f2;

	    vec4 result = vec4(lines_thin_A,lines_thin_B,lines_thin_C,lines_thin_D);

	    

	    return result;	

    }



vec4 popcorn_Frac(

				vec3 position,
				float lrg_Shp_Itr,
				float sml_Shp_Itr,
				float octaves,
				float lacunarity,
				float octGain,
				float lines_width,
				float lines_widthAdd,
				float lrg_Shp_Scale,
				float sml_Shp_Scale,
				float lrg_Shp_Amp,
				float sml_Shp_Amp,
				int distSet,
				int outSet

				)

{	vec4 sum = vec4(0.0);
	vec4 amp = vec4(1.0);
	float lw = lines_width;
	float i;
	if (lacunarity == 0.0) {lacunarity=1.0;}


	for (i = 0.0; i<octaves; i = i + 1.0)
	{
		sum += amp * voronoi_popcorn(position,lrg_Shp_Itr,sml_Shp_Itr,lrg_Shp_Scale,sml_Shp_Scale,lrg_Shp_Amp,sml_Shp_Amp,lw,distSet);
		position = position * 1.0/lacunarity;
		amp *= vec4(octGain);
		lw += lines_widthAdd;

	}
	return sum;
}


