<!--
================================================================================
== Mari Ideascale Procedural Library
== Copyright (c) 2013 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_GradePlus.xml
== Description: Slightly modified version of the stock Mari Grade Node.
================================================================================
== Author: Jens Kafitz | Mari Ideascale
== Web: www.campi3d.com
== Web: www.mari.ideascale.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: June, 16 2014
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>Grade+</ID>
    <DefaultName>Grade+</DefaultName>
    <Category>/Custom/</Category>
    <Tags>
        <Tag>_adjustment</Tag>
    </Tags>
    <Inputs>
        <Input Name="Input"></Input>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="Blackpoint" Group="" Type="Vector4f" Min="(-1.0,-1.0,-1.0,-1.0)" Max="(1.0,1.0,1.0,1.0)" Logarithmic="1">(0.0,0.0,0.0,0.0)</Attribute>
        <Attribute Name="BPCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Whitepoint" Group="" Type="Vector4f" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="WPCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Lift" Group="" Type="Vector4f" Min="(-1.0,-1.0,-1.0,-1.0)" Max="(1.0,1.0,1.0,1.0)" Logarithmic="1">(0.0,0.0,0.0,0.0)</Attribute>
        <Attribute Name="LiftCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Gain" Group="" Type="Vector4f" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="GainCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Multiply" Group="" Type="Vector4f" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="MultCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Offset" Group="" Type="Vector4f" Min="(-1.0,-1.0,-1.0,-1.0)" Max="(1.0,1.0,1.0,1.0)" Logarithmic="1">(0.0,0.0,0.0,0.0)</Attribute>
        <Attribute Name="OffsetCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="Gamma" Group="" Type="Vector4f" Min="(0.2,0.2,0.2,0.2)" Max="(5.0,5.0,5.0,5.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <Attribute Name="GammaCol" PrettyName=" " Group="" Type="Color" Min="(0.0,0.0,0.0,0.0)" Max="(4.0,4.0,4.0,4.0)" Logarithmic="1">(1.0,1.0,1.0,1.0)</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Red" Type="bool" Group="Channels" Min="true" Max="false">true</Attribute>
        <Attribute Name="Green" Type="bool" Group="Channels" Min="true" Max="false">true</Attribute>
        <Attribute Name="Blue" Type="bool" Group="Channels" Min="true" Max="false">true</Attribute>
        <Attribute Name="Alpha" Type="bool" Group="Channels" Min="true" Max="false">true</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Groups>
        <Group Name="Channels" Expanded="false"></Group>
    </Groups>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Input"><Pos>0,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader>
                <Inputs>
                    <Input Name="Input"><Default>vec4(1,1,1,1)</Default></Input>
                </Inputs>
                <Body><![CDATA[

                vec4 BPFinal = $Blackpoint * $BPCol;

                if ($Blackpoint == vec4(0.0,0.0,0.0,0.0) && $BPCol != vec4(1.0,1.0,1.0,1.0))
                {
                    BPFinal = $BPCol;
                }

                vec4 WPFinal = $Whitepoint * $WPCol;
                vec4 LiftFinal = $Lift * $LiftCol;

                if ($Lift == vec4(0.0,0.0,0.0,0.0) && $LiftCol != vec4(1.0,1.0,1.0,1.0))
                {
                    LiftFinal = $LiftCol;
                }

                vec4 GainFinal = $Gain * $GainCol;
                vec4 MultFinal = $Multiply * $MultCol;
                vec4 OffsetFinal = $Offset * $OffsetCol;

                if ($Offset == vec4(0.0,0.0,0.0,0.0) && $OffsetCol != vec4(1.0,1.0,1.0,1.0))
                {
                    OffsetFinal = $OffsetCol;
                }

                vec4 GammaFinal = $Gamma * $GammaCol;

                vec4 A = MultFinal * ( GainFinal - LiftFinal ) / ( WPFinal - BPFinal );
                vec4 B = OffsetFinal + LiftFinal - A * BPFinal;
                vec4 C = A * #Input + B;
                C = clamp(C, vec4(0.0), C);

                vec4 result = pow( C, 1.0 / $Gamma );
                Output = vec4($Red   ? result.r : #Input.r,
                              $Green ? result.g : #Input.g,
                              $Blue  ? result.b : #Input.b,
                              $Alpha ? result.a : #Input.a);

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>
