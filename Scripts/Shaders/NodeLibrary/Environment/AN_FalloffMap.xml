<!--
================================================================================
== Antonio Neto Mari Procedural Library
== Copyright (c) 2015 Antonio Neto. All Rights Reserved.
================================================================================
== File: AN_FalloffMap.xml
== Description: Falloff effects like facing ratio, surface luminance etc.
================================================================================
== Author: Antonio Neto
== Web: www.netocg.blogspot.com
== Email: netocg.fx@gmail.com
================================================================================
== Modified for Extension Pack: Jens Kafitz
================================================================================
== Modified Date: January, 10 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>Falloff Map</ID>
    <DefaultName>Falloff Map</DefaultName>
    <Category>Environment/Custom/</Category>
    <Attributes>
        <Attribute Name="FrontColor"	PrettyName="Front Color"			Group="Falloff Parameters" 			Type="color"	Description="Defines the color of the Normals that are facing the camera">(0.0,0.0,0.0,1)</Attribute>
        <Attribute Name="SideColor"		PrettyName="Side Color"				Group="Falloff Parameters" 			Type="color"	Description="Defines the color of the Normals that are look at 90ยบ in relation to the viewing angle">(1.0,1.0,1.0,1)</Attribute>
        <Attribute Name="FalloffType"	PrettyName="Falloff Type/Direction"	Group="Falloff Parameters" 			Type="userenum" Description="Chooses the kind of falloff or direction. This are based on 3DS Max Falloff Map node.">0, 0,1,2,3,4, Perpendicular/Parallel, Fresnel, Local X Axis, Local Y Axis, Local Z Axis</Attribute>
		<Attribute Name="Falloff" 		PrettyName="Mix Curve"				Group="Mix Curve"					Type="curve"> </Attribute>
		<Attribute Name="IOR"			PrettyName="Index of Refraction"	Group="Mode Specific Parameters"	Type="double"	Description="Sets a new Index of Refraction." Min="0.001" Max="10">1.6</Attribute>
	</Attributes>
    <Tags>
        <Tag>_notcacheable</Tag>
        <Tag>_notbakeable</Tag>
    </Tags>
    <Contexts>
        <Context Type='NodeGraphView'>
        </Context>
            <Context Type='GLSL'>
            <Shader ShaderType='Fragment'>
                <Body>
                <![CDATA[

                vec4 Blend  = vec4 (0.0);
				
				#if defined MRI_SHADER_FRAGMENT || defined MRI_SHADER_TESS_EVALUATION
				
				// Perpendicular/Parallel Mode (Facing Ratio in Maya)
				if ($FalloffType == 0)
				{
					float VdotN = dot(State.ViewVectorInEyeSpaceFromProjectionCamera, State.NormalInEyeSpaceFromProjectionCamera);
					float Fresnel = mriCurveLookup($Falloff, length(VdotN) );
					Blend  = mix($FrontColor, $SideColor, 1-Fresnel);                    
				}

				// Fresnel Mode
				if ($FalloffType == 1)
				{			
					float VdotN = dot(-State.ViewVectorInEyeSpaceFromProjectionCamera, State.NormalInEyeSpaceFromProjectionCamera);
					float IdotN = dot(State.ViewVectorInEyeSpaceFromProjectionCamera, State.NormalInEyeSpaceFromProjectionCamera);
					float Eta = (IdotN < 0.0) ? 1.0/$IOR : $IOR;
					float F0 = (1.0-Eta)/(1.0+Eta);
					F0 *= F0;
					float Fresnel = F0 + (1.0-F0) * pow(1.0 - VdotN, 5.0);
					Fresnel = mriCurveLookup($Falloff, length(Fresnel) );
					Blend  = mix($FrontColor, $SideColor, Fresnel);   
				}
					

				// REMOVED SHADOW-LIGHT + DEPTH MODES BECAUSE IT CONFUSES PEOPLE THAT IT IS NOT STABLE IN A PROJECTION MASK
				// MAKING IT ONLY NICE TO LOOK AT BUT OF NO PARTICULAR PRACTICAL TEXTURING USE - JENS KAFITZ
 
				// Shadow/Light Mode
				// if ($FalloffType == 2)
				// {											
					// for(int i=0;i<4;i++)
					// {
						// if( vec3( 0) == u_MriLightSources[i].DiffuseColor.rgb && vec3( 0) == u_MriLightSources[i].SpecularColor.rgb)
						// {
							// continue;
						// }
						// 
						// vec3 L = normalize(u_MriLightSources[i].Position.xyz - State.FragmentPositionInEyeSpaceFromProjectionCamera);
						// float lightVisibility = mriLightVisibility( i, State.Position);                        
						// 
						// float NdotL = max(0, dot(State.Normal, L) );
						// float Fresnel = mriCurveLookup($Falloff, length(NdotL) );
						// Blend += mix($FrontColor, $SideColor, Fresnel) * NdotL * lightVisibility;						
					// }    				
				// }

				// Distance Blend Mode
				// if ($FalloffType == 3)
				// {
					// float Fresnel = mriCurveLookup($Falloff, length(gl_FragDepth) );
					// Blend = mix($FrontColor, $SideColor, 1-Fresnel );
				// }			
						

		
				// Local X Axis
				if ($FalloffType == 2)
                {
					vec3 N = vec3(0,0,State.Position.z);
					vec3 P = N*u_MriObjectRadius+u_MriObjectCenter;
					float d = -dot(N,P);
					float D = abs(dot(N,State.Position)+d)/length(P);
					D /=u_MriObjectRadius;					
                    float Fresnel = mriCurveLookup($Falloff, length(D) );
                    Blend  = mix($FrontColor, $SideColor, Fresnel);                    
                }
				
				// Local Y Axis
				if ($FalloffType == 3)
                {
					vec3 N = vec3(0,State.Position.y,0);
					vec3 P = N*u_MriObjectRadius+u_MriObjectCenter;
					float d = -dot(N,P);
					float D = abs(dot(N,State.Position)+d)/length(P);
					D /=u_MriObjectRadius;					
                    float Fresnel = mriCurveLookup($Falloff, length(D) );
                    Blend  = mix($FrontColor, $SideColor, Fresnel);                    
                }
				
				// Local Z Axis
				if ($FalloffType == 4)
                {
					vec3 N = vec3(State.Position.x,0,0);
					vec3 P = N*u_MriObjectRadius+u_MriObjectCenter;
					float d = -dot(N,P);
					float D = abs(dot(N,State.Position)+d)/length(P);
					D /=u_MriObjectRadius;					
                    float Fresnel = mriCurveLookup($Falloff, length(D) );
                    Blend  = mix($FrontColor, $SideColor, Fresnel);                    
                }			
					
				#endif               
				
                Output.rgb = Blend.rgb;
				Output.a = 1.0;
                ]]>
                </Body>
            </Shader>
        </Context>
    </Contexts>
</Node>