<!--
================================================================================
== Ward Isotropic Specular
== Copyright (c) 2015 Nicholas Breslow. All Rights Reserved.
================================================================================
== File: NB_Specular_WardIsotropic.xml
== Description: Greg ward isotropic specular highlight shading model node.
================================================================================
== Author: Nicholas Breslow
== Web: www.nbreslow.com
== Email: nick@nbreslow.com
================================================================================
== Modified Date: June, 15 2014
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>Ward Isotropic</ID>
    <DefaultName>Ward Isotropic</DefaultName>
    <Inputs>
        <Input Name="SpecularColor" PrettyName="Specular Color" PreferredInput='1'></Input>
        <Input Name="Specular" PrettyName="Specular Weight"></Input>
        <Input Name="SpecularRoughness" PrettyName="Specular Roughness"></Input>
        <Input Name="Normal"></Input>
    </Inputs>
    <Attributes>
        <Attribute Name="SpecularRoughness" PrettyName="Specular Roughness" Type="double" Min="0.0" Max="1.0">0.5</Attribute>
    </Attributes>
    <Tags>
        <Tag>_notcacheable</Tag>
        <Tag>_specular</Tag>
    </Tags>
    <Contexts>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="SpecularColor"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="Specular"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="SpecularRoughness"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="Normal"><Default>vec4(0,0,1,1)</Default></Input>
                </Inputs>
                <Body><![CDATA[

                vec3 V = normalize(-State.ViewVectorInEyeSpaceFromViewCamera);
                vec3 N = #Normal.xyz;
                vec3 Specular = vec3(0.0);
                float SpecularRoughness = clamp(($SpecularRoughness*#SpecularRoughness.r), 0.001,0.999);

                for(int i=0;i<4;i++)
                {
                    // Light Visibility
                    float lightVisibility = mriLightVisibility( i, State.Position);

                    // Light Direction
                    vec3 L = normalize(u_MriLightSources[i].Position.xyz - State.FragmentPositionInEyeSpaceFromViewCamera);

                    // Ward Isotropic Specular
                    float SpecTerm = nb_wardIsotropic(N,V,L,SpecularRoughness);
                    Specular += SpecTerm * u_MriLightSources[i].SpecularColor.rgb * lightVisibility;
                }

                Output.rgb = Specular * #Specular.r * #SpecularColor.rgb;
                Output.a = #SpecularColor.a;

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>