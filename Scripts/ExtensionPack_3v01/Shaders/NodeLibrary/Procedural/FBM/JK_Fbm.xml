<!--
================================================================================
== FBM+
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_Fbm.xml
== Description: Basic fractal brownian motion procedural noise node.
================================================================================
== Author: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: May, 18 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>fBm+</ID>
    <DefaultName>FBM+</DefaultName>
    <Category>Procedural/Custom/FBM/</Category>
    <Inputs>
        <Input Name="Transform" PrettyName="Manifold"></Input>
        <Input Name="Size" ></Input>
        <Input Name="Octaves" ></Input>
        <Input Name="Lacunarity" ></Input>
        <Input Name="Offset" ></Input>
        <Input Name="Amplitude" ></Input>
        <Input Name="Threshold" ></Input>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="colorA" PrettyName="Color A" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
        <Attribute Name="colorB" PrettyName="Color B" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0,0,0,1)</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Size" Group="Size" Type="double" Min="0" Max="2" Description="The general feature size">0.5</Attribute>
        <Attribute Name="Octaves" Group="Size" Type="float" Min="0" Max="8" Description="Visual complexitity of noise">3</Attribute>
        <Attribute Name="Lacunarity" Group="Size" Type="double" Min="0.001" Max="1.0" Description="Frequency spacing between successive octaves">0.5</Attribute>
        <Attribute Name="Offset" PrettyName="Offset" Group="Size" Type="double" Min="0.0001" Max="1" Description="Frequency Offset">0.5</Attribute>
        <Attribute Name="Seed" PrettyName="Seed" Group="Size" Type="double" Min="1" Max="100000" Logarithmic="1" Description="frequency">1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Amplitude" PrettyName="amplitude" Group="Modifiers" Type="double" Min="0.0001" Max="1" Description="Scaling factor between successive octaves" >1</Attribute>
        <Attribute Name="Gain" Group="Modifiers" Type="double" Min="0" Max="1" Description="The Contrast of the Noise">1.0</Attribute>
        <Attribute Name="Baseline" Group="Modifiers" Type="double" Min="0" Max="1" Description="After each Noise Routine the Noise gets reprocessed (noise*Baseline+Baseline) to a new Baseline,0 turns this behavior off" >0.5</Attribute>
        <Attribute Name="Absolut" PrettyName="Absolute Values" Group="Modifiers" Type="bool" Min="false" Max="true" Description="By default positive and negative noise values will all be treated as positive making for a denser noise. This will remove any negative noise values">false</Attribute>
        <Attribute Name="clamp" PrettyName="Clamp Output" Group="Modifiers" Type="bool" Min="false" Max="true" >true</Attribute>
        <Attribute Name="Invert" PrettyName="Invert" Group="Modifiers" Type="bool" Min="false" Max="true" Description="Inverts the Noise result before ColorA+B are applied" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Threshold" PrettyName="Threshold" Group="Threshold" Type="double" Min="0" Max="1" Description="Threshold of final result" >0.5</Attribute>
        <Attribute Name="Clip" PrettyName="Soft Clip Result" Group="Threshold" Type="double" Min="0.001" Max="1" Description="extends the threshold box by a fixed value up and down">0.5</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="uv" PrettyName="UV Space" Group="Space" Type="bool" Min="false" Max="true" Description="Runs the noise 2d uv based, use offset/scale x/y and rotate z" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XScale" PrettyName="Scale X" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <Attribute Name="YScale" PrettyName="Scale Y" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <Attribute Name="ZScale" PrettyName="Scale Z" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="rX" PrettyName="Rotate X" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rY" PrettyName="Rotate Y" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rZ" PrettyName="Rotate Z" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XOffset" PrettyName="Translate X" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <Attribute Name="YOffset" PrettyName="Translate Y" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <Attribute Name="ZOffset" PrettyName="Translate Z" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Groups>
        <Group Name="Space" Expanded="false"></Group>
        <Group Name="Transform Scale" Expanded="false"></Group>
        <Group Name="Transform Rotate" Expanded="false"></Group>
        <Group Name="Transform Translate" Expanded="false"></Group>
    </Groups>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Transform" ><Pos>0,-50</Pos></Input>
                <Input Name="Size" ><Pos>-120,15</Pos></Input>
                <Input Name="Lacunarity"><Pos>-120,0</Pos></Input>
                <Input Name="Octaves" ><Pos>-120,-15</Pos></Input>
                <Input Name="Amplitude"><Pos>120,-15</Pos></Input>
                <Input Name="Offset" ><Pos>120,-0</Pos></Input>
                <Input Name="Threshold"><Pos>120,15</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="Transform" ><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="Size" ><Default>vec4($Size)</Default></Input>
                <Input Name="Octaves" ><Default>vec4($Octaves)</Default></Input>
                <Input Name="Lacunarity" ><Default>vec4($Lacunarity)</Default></Input>
                <Input Name="Offset" ><Default>vec4($Offset)</Default></Input>
                <Input Name="Amplitude" ><Default>vec4($Amplitude)</Default></Input>
                <Input Name="Threshold" ><Default>vec4($Threshold)</Default></Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                <Input Name="Transform" ><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="Size" ><Default>vec4($Size)</Default></Input>
                <Input Name="Octaves" ><Default>vec4($Octaves)</Default></Input>
                <Input Name="Lacunarity" ><Default>vec4($Lacunarity)</Default></Input>
                <Input Name="Offset" ><Default>vec4($Offset)</Default></Input>
                <Input Name="Amplitude" ><Default>vec4($Amplitude)</Default></Input>
                <Input Name="Threshold" ><Default>vec4($Threshold)</Default></Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[


                //Initalize UI Sliders. Need to call slider attributes once in order for them to be activated in UI
                float INIT = $Size; INIT = $Octaves ; INIT = $Lacunarity; INIT = $Offset; INIT = $Amplitude; INIT = $Threshold;


                float lacunarity = #Lacunarity.r*8.0;
                float offset = #Offset.r;

                // compensate for scene size by applying eponential growth
                float size_pow = (pow(10000.0,#Size.r*#Size.r)-1.0) + 0.0001;

                // 3d space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec3 trans = (vec3($XOffset,$YOffset,$ZOffset)*size_pow) + vec3($Seed);
                vec3 rotate = vec3($rX,$rY,$rZ);
                vec3 scale = vec3(1.0) / vec3($XScale,$YScale,$ZScale);

                // transform the position to translate,rotate,scale the position
                vec3 P = positionTransform(#Transform.rgb,trans,rotate,scale);

                // 2d uv space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec2 UVOffset = vec2($XOffset,$YOffset) + vec2($Seed);
                vec2 UVScale = vec2($XScale,$YScale);

                // transform the position to translate,rotate,scale the position
                vec2 InputScaleUV = relUVTransform(State.UV,$rZ,UVOffset,UVScale,0.5,0.5)/ (size_pow);

                // blend between 2d and 3d space position
                P = mix(P,vec3(InputScaleUV,1.0),float($uv));

                vec3 scaled_P = P / size_pow;
                float noise_val = rmfBm(scaled_P,#Octaves.r,lacunarity,$Gain,#Amplitude.r,offset);
                noise_val = mix(noise_val,abs(noise_val),float($Absolut));
                float Baseline = 1.0 - $Baseline;

                if ($Baseline==0.0){noise_val = noise_val;}
                else { noise_val = noise_val*Baseline + Baseline;}

                noise_val = mix(noise_val,clamp(noise_val,0.0,1.0),float($clamp));
                float result = softThreshold(#Threshold.r, $Clip, noise_val);

                float _invertResult = float($Invert);

                vec4 fractal = mix(mix($colorB,$colorA,result),mix($colorA,$colorB,result),_invertResult);

                Output = fractal;

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

