<!--
================================================================================
== Cellular Noise
== Copyright (c) 2015 Miguel A Santiago Jr.. All Rights Reserved.
================================================================================
== File: DT3D_CellularNoise.xml
== Description: Cellular procedural noise node.
================================================================================
== Author: Miguel A Santiago Jr.
== Web: www.digiteck3d.com
== Email: miguel@digiteck3d.com
================================================================================
== Modifications + Maintenance: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: May, 18 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>Cellular Noise</ID>
    <DefaultName>Cellular Noise</DefaultName>
    <Category>Procedural/Extension Pack/Voronoi/</Category>
    <Inputs>
        <Input Name="Transform" PrettyName="Manifold"></Input>
        <Input Name="Frequency"></Input>
        <Input Name="Jitter"></Input>
        <Input Name="stepSize" PrettyName="Outline Size"></Input>
        <Input Name="Threshold"></Input>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="colorA" PrettyName="Color A" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0,0,0,1)</Attribute>
        <Attribute Name="colorB" PrettyName="Color B" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="frequency" PrettyName="Frequency" Group="Size" Type="float" Min="1" Max="10" Logarithmic="1">2</Attribute>
        <Attribute Name="jitter" PrettyName="Jitter" Group="Size" Type="float" Min="0" Max="2.0">0.9</Attribute>
        <Attribute Name="Seed" PrettyName="Seed" Group="Size" Type="double" Min="1" Max="100000" Logarithmic="1">1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="outSet" PrettyName="Output Type" Group="Modifiers" Type="stringlist">F1,F1,F2,F2-F1,F1+F2,F1*F2</Attribute>
        <Attribute Name="distSet" PrettyName="Distance Type" Group="Modifiers" Type="stringlist">Real,Real,Squared,Quadratic,Manhattan,Chebychev,MinkovskyH,Minkovsky4</Attribute>
        <Attribute Name="modSet" PrettyName="Modifier Type" Group="Modifiers" Type="stringlist">None,None,Signed,Cosine,Outline</Attribute>
        <Attribute Name="stepSize" PrettyName="Outline Size" Group="Modifiers" Type="float" Min="0" Max="1.0">0.05</Attribute>
        <Attribute Name="threshold" PrettyName="Threshold" Group="Modifiers" Type="float" Min="0" Max="1" Logarithmic="1">0.0</Attribute>
        <Attribute Name="clamp" PrettyName="Clamp Output" Group="Size" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="invert" PrettyName="Invert" Group="Modifiers" Type="bool" Min="false" Max="true">false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="uv" PrettyName="UV Space" Group="Space" Type="bool" Min="false" Max="true" Description="Runs the noise 2d uv based, use offset/scale x/y and rotate z" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="scaleX" PrettyName="Scale X" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <Attribute Name="scaleY" PrettyName="Scale Y" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <Attribute Name="scaleZ" PrettyName="Scale Z" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="rotateX" PrettyName="Rotate X" Group="Transform Rotate" Type="float" Min="0" Max="360">0</Attribute>
        <Attribute Name="rotateY" PrettyName="Rotate Y" Group="Transform Rotate" Type="float" Min="0" Max="360">0</Attribute>
        <Attribute Name="rotateZ" PrettyName="Rotate Z" Group="Transform Rotate" Type="float" Min="0" Max="360">0</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="transX" PrettyName="TranslateX" Group="Transform Translate" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <Attribute Name="transY" PrettyName="TranslateY" Group="Transform Translate" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <Attribute Name="transZ" PrettyName="TranslateZ" Group="Transform Translate" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Groups>
        <Group Name="Color" Expanded="true"></Group>
        <Group Name="Size" Expanded="true"></Group>
        <Group Name="Modifiers" Expanded="true"></Group>
        <Group Name="Space" Expanded="false"></Group>
        <Group Name="Transform Scale" Expanded="false"></Group>
        <Group Name="Transform Rotate" Expanded="false"></Group>
        <Group Name="Transform Translate" Expanded="false"></Group>
    </Groups>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Transform" ><Pos>0,-50</Pos></Input>
                <Input Name="Frequency" ><Pos>-120,-10</Pos></Input>
                <Input Name="Jitter" ><Pos>-120,10</Pos></Input>
                <Input Name="stepSize" ><Pos>120,-10</Pos></Input>
                <Input Name="Threshold" ><Pos>120,10</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="Transform" ><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="Frequency" ><Default>vec4($frequency)</Default></Input>
                <Input Name="Jitter" ><Default>vec4($jitter)</Default></Input>
                <Input Name="stepSize" ><Default>vec4($stepSize)</Default></Input>
                <Input Name="Threshold" ><Default>vec4($threshold)</Default></Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                <Input Name="Transform" ><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="Frequency" ><Default>vec4($frequency)</Default></Input>
                <Input Name="Jitter" ><Default>vec4($jitter)</Default></Input>
                <Input Name="stepSize" ><Default>vec4($stepSize)</Default></Input>
                <Input Name="Threshold" ><Default>vec4($threshold)</Default></Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[

                //Initalize UI Sliders. Need to call slider attributes once in order for them to be activated in UI
                float INIT = $frequency; INIT = $jitter; INIT = $stepSize; INIT = $threshold;

                // compensate for scene size by applying eponential growth
                float freq_pow = (pow(#Frequency.r,#Frequency.r)-1.0) + 0.01;

                // 3d space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec3 trans = (vec3($transX,$transY,$transZ)*freq_pow) + vec3($Seed);
                vec3 rotate = vec3($rotateX,$rotateY,$rotateZ);
                vec3 scale = vec3(1.0) / vec3($scaleX,$scaleY,$scaleZ);

                // transform the position to translate,rotate,scale the position
                vec3 P = positionTransform(#Transform.rgb,trans,rotate,scale) / freq_pow;

                // 2d uv space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec2 UVOffset = vec2($transX,$transY) + vec2($Seed);
                vec2 UVScale = vec2($scaleX,$scaleY);

                // transform the position to translate,rotate,scale the position
                vec2 InputScaleUV = relUVTransform(State.UV,$rotateZ,UVOffset,UVScale,0.5,0.5) / (freq_pow);

                // blend between 2d and 3d space position
                P = mix(P,vec3(InputScaleUV,1.0),float($uv));

                // cellular noise function
                Output = DT3D_CellularNoise(P,$colorA,$colorB,#Frequency.r,#Jitter.r,#stepSize.r,#Threshold.r,$invert,$outSet,$distSet,$modSet);
                Output = mix(Output,clamp(Output,vec4(0.0),vec4(1.0)),float($clamp));


                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>
