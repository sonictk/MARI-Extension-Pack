<!--
================================================================================
== Voronoi Popcorn
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_VoronoiPopcorn.xml
== Description: A Voronoi Based Fractal, with several Noises as offsets. Useful for Veins and other organic features.
================================================================================
== Author: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: May, 18 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->


<Node>
    <ID>VoronoiPopcorn</ID>
    <DefaultName>VoronoiPopcorn</DefaultName>
    <Category>Procedural/Custom/MultiFractal/</Category>
    <Inputs>
        <Input Name="Transform" PrettyName="Manifold"></Input>
        <Input Name="vScale" PrettyName="Primary Scale"></Input>
        <Input Name="Threshold"></Input>
        <Input Name="octaveGain" PrettyName="A/B Density Gain"></Input>
        <Input Name="lacunarity" PrettyName="Lacunarity"></Input>
        <Input Name="width" PrettyName="Lacunarity Density"></Input>
        <Input Name="lrg_shp_scale" PrettyName="Large Edge Detail"></Input>
        <Input Name="lrg_shp_iteration" PrettyName="Large Detail Octaves"></Input>
        <Input Name="lrg_shp_amp" PrettyName="Large Detail Amplitude"></Input>
        <Input Name="sml_shp_scale" PrettyName="Small Edge Detail"></Input>
        <Input Name="sml_shp_iteration" PrettyName="Small Detail Octaves"></Input>
        <Input Name="sml_shp_amp" PrettyName="Small Detail Amplitude"></Input>
    </Inputs>
     <Attributes>

        <!--===============================================================================================================-->
        <Attribute Name="colorA" PrettyName="Color A" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)" Description="Color A">(1,1,1,1)</Attribute>
        <Attribute Name="colorB" PrettyName="Color B" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)" Description="Color B">(0,0,0,1)</Attribute>
        <Attribute Name="invert" PrettyName="Invert" Group="Color" Type="bool" Min="false" Max="true" Description="Invert Noise before applying Colors">false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="vor_channel" PrettyName="Voronoi Base" Group="Voronoi Procedure" Type="stringlist">Popcorn,Popcorn,Coffee Bean,Sparse Corn, Crumpled Paper</Attribute>
        <Attribute Name="vScale" PrettyName="Primary Scale" Group="Voronoi Base" Type="double" Min="0.01" Max="1000" Logarithmic="1" Description="Primary Scale Factor that all noises used in this procedural run through">1</Attribute>
       <Attribute Name="seed" PrettyName="Seed" Group="Voronoi Base" Type="double" Min="1" Max="100000" Logarithmic="1" Description="Random Offset">50</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Threshold" PrettyName="Threshold" Group="Threshold" Type="double" Min="0" Max="10" Description="Threshold of final result, the noise has a very low range so with high treshold ranges you can get really fine results" >0.5</Attribute>
        <Attribute Name="Clip" PrettyName="Soft Clip Result" Group="Threshold" Type="double" Min="0.001" Max="10" Description="Threshold of final result, the noise has a very low range so with high treshold ranges you can get really fine results">0.5</Attribute>
        <Attribute Name="Mid" PrettyName="Contrast" Group="Threshold" Type="double" Min="0.001" Max="1" Description="A multiplier of the end noise, resulting in more contrast between color a and color b" >0.1</Attribute>
        <Attribute Name="clamp" PrettyName="Clamp" Group="Threshold" Type="bool" Min="false" Max="true" Description="Clamping of final noise before applying color a/b">true</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="octaves" PrettyName="Density" Group="Relationship Color A/B" Type="double" Min="1" Max="10" Logarithmic="1" Description="Octaves of primary Noise">2</Attribute>
        <Attribute Name="octaveGain" PrettyName="Density Gain" Group="Relationship Color A/B" Type="double" Min="0.01" Max="50" Logarithmic="1" Description="Octave Gain of primary Noise">3</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="lacunarity" PrettyName="Lacunarity" Group="Lacunarity" Type="double" Min="0" Max="1000" Logarithmic="1" Description="Lacunarity of secondary overlay noise, set to 0 to turn it off">1</Attribute>
        <Attribute Name="width" PrettyName="Density" Group="Lacunarity" Type="double" Min="1" Max="10" Logarithmic="1" Description="Scale of secondary Noise">2</Attribute>
        <Attribute Name="widthAdd" PrettyName="Density Gain" Group="Lacunarity" Type="double" Min="0.01" Max="50" Logarithmic="1" Description="Gain of secondary Noise">3</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="lrg_shp_scale" PrettyName="Detail Scale" Group="Large Edge Detail" Type="double" Min="0.001" Max="100" Description="Scale of noise to offset Shapes with, this will always be larger than the one of the secondary offset noise">50</Attribute>
        <Attribute Name="lrg_shp_iteration" PrettyName="Large Detail Octaves" Group="Large Edge Detail" Type="double" Min="0" Max="5" Description="Octaves of noise to offset Shapes with">2</Attribute>
        <Attribute Name="lrg_shp_amp" PrettyName="Detail amplitude" Group="Large Edge Detail" Type="double" Min="0" Max="10" Description="amplitude of noise to offset Shapes with">3</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="sml_shp_scale" PrettyName="Detail Scale" Group="Small Edge Detail" Type="double" Min="0.001" Max="50" Description="Scale of noise to offset Shapes with, this will always be smaller than the one of the primary offset noise">15</Attribute>
        <Attribute Name="sml_shp_iteration" PrettyName="Small Detail Octaves" Group="Small Edge Detail" Type="double" Min="0" Max="5" Description="Octaves of noise to offset Shapes with">1.5</Attribute>
        <Attribute Name="sml_shp_amp" PrettyName="Detail amplitude" Group="Small Edge Detail" Type="double" Min="0" Max="10" Description="amplitude of noise to offset Shapes with">3</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="uv" PrettyName="UV Space" Group="Space" Type="bool" Min="false" Max="true" Description="Runs the noise 2d uv based, use offset/scale x/y and rotate z" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XScale" PrettyName="Scale X" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <Attribute Name="YScale" PrettyName="Scale Y" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <Attribute Name="ZScale" PrettyName="Scale Z" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1" >1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="rX" PrettyName="Rotate X" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rY" PrettyName="Rotate Y" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rZ" PrettyName="Rotate Z" Group="Transform Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XOffset" PrettyName="Translate X" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <Attribute Name="YOffset" PrettyName="Translate Y" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <Attribute Name="ZOffset" PrettyName="Translate Z" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1" >0</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Groups>
        <Group Name="Color" Expanded="false"></Group>
        <Group Name="Large Edge Detail" Expanded="false"></Group>
        <Group Name="Small Edge Detail" Expanded="false"></Group>
        <Group Name="Space" Expanded="false"></Group>
        <Group Name="Transform Scale" Expanded="false"></Group>
        <Group Name="Transform Rotate" Expanded="false"></Group>
        <Group Name="Transform Translate" Expanded="false"></Group>
    </Groups>
     <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Transform"><Pos>0,-100</Pos></Input>
                <Input Name="vScale"><Pos>-150,-50</Pos></Input>
                <Input Name="Threshold"><Pos>150,-50</Pos></Input>
                <Input Name="octaveGain"><Pos>-70,-70</Pos></Input>
                <Input Name="lacunarity"><Pos>36,-70</Pos></Input>
                <Input Name="width"><Pos>120,-70</Pos></Input>
                <Input Name="lrg_shp_scale"><Pos>-160,-5</Pos></Input>
                <Input Name="lrg_shp_iteration"><Pos>-160,10</Pos></Input>
                <Input Name="lrg_shp_amp"><Pos>-160,25</Pos></Input>
                <Input Name="sml_shp_scale"><Pos>160,-5</Pos></Input>
                <Input Name="sml_shp_iteration"><Pos>160,10</Pos></Input>
                <Input Name="sml_shp_amp"><Pos>160,25</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="Transform"><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="vScale"><Default>vec4($vScale)</Default></Input>
                <Input Name="Threshold"><Default>vec4($Threshold)</Default></Input>
                <Input Name="octaveGain"><Default>vec4($octaveGain)</Default></Input>
                <Input Name="lacunarity"><Default>vec4($lacunarity)</Default></Input>
                <Input Name="width"><Default>vec4($width)</Default></Input>
                <Input Name="lrg_shp_scale"><Default>vec4($lrg_shp_scale)</Default></Input>
                <Input Name="lrg_shp_iteration"><Default>vec4($lrg_shp_iteration)</Default></Input>
                <Input Name="lrg_shp_amp"><Default>vec4($lrg_shp_amp)</Default></Input>
                <Input Name="sml_shp_scale"><Default>vec4($sml_shp_scale)</Default></Input>
                <Input Name="sml_shp_iteration"><Default>vec4($sml_shp_iteration)</Default></Input>
                <Input Name="sml_shp_amp"><Default>vec4($sml_shp_amp)</Default></Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                <Input Name="Transform"><Default>vec4(State.Position,1.0)</Default></Input>
                <Input Name="vScale"><Default>vec4($vScale)</Default></Input>
                <Input Name="Threshold"><Default>vec4($Threshold)</Default></Input>
                <Input Name="octaveGain"><Default>vec4($octaveGain)</Default></Input>
                <Input Name="lacunarity"><Default>vec4($lacunarity)</Default></Input>
                <Input Name="width"><Default>vec4($width)</Default></Input>
                <Input Name="lrg_shp_scale"><Default>vec4($lrg_shp_scale)</Default></Input>
                <Input Name="lrg_shp_iteration"><Default>vec4($lrg_shp_iteration)</Default></Input>
                <Input Name="lrg_shp_amp"><Default>vec4($lrg_shp_amp)</Default></Input>
                <Input Name="sml_shp_scale"><Default>vec4($sml_shp_scale)</Default></Input>
                <Input Name="sml_shp_iteration"><Default>vec4($sml_shp_iteration)</Default></Input>
                <Input Name="sml_shp_amp"><Default>vec4($sml_shp_amp)</Default></Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[


                //Initalize UI Sliders. Need to call slider attributes once in order for them to be activated in UI
                float INIT = $vScale; INIT = $Threshold; INIT =  $octaveGain; INIT = $lacunarity; INIT = $width;
                      INIT = $lrg_shp_scale; INIT = $lrg_shp_iteration; INIT = $lrg_shp_amp;
                      INIT = $sml_shp_scale; INIT = $sml_shp_iteration; INIT = $sml_shp_amp;


                // 3d space surface position
                // build the needed vector attributes for position transform
                vec3 trans = (vec3($XOffset,$YOffset,$ZOffset)) + vec3($seed);
                vec3 rotate = vec3($rX,$rY,$rZ);
                vec3 scale = vec3(1.0) / vec3($XScale,$YScale,$ZScale);

                // transform the position to translate,rotate,scale the position
                vec3 Pos = positionTransform(#Transform.rgb,trans,rotate,scale);


                // 2d uv space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec2 UVOffset = vec2($XOffset,$YOffset) + vec2($seed);
                vec2 UVScale = vec2($XScale,$YScale);

                // transform the position to translate,rotate,scale the position
                vec2 InputScaleUV = relUVTransform(State.UV,$rZ,UVOffset,UVScale,0.5,0.5);

                // blend between 2d and 3d space position
                Pos = mix(Pos,vec3(InputScaleUV,1.0),float($uv));

                // Contrast Slider
                // Want slider to be 0-1 but need a bit more range in the contrast
                float Mid = $Mid * 100;


                switch ($vor_channel) // choosing the different channels (RGBA) to use from the popcorn function
                {

                    case 3:
                    Mid = $Mid * 10;
                    break;

                }




                float vor_channel;
                float Threshold = #Threshold.r;
                float softClip = $Clip;




                // keeping large scale pattern always larger than small scale pattern
                float lrg_shp_scale = (#lrg_shp_scale.r + #sml_shp_scale.r );

                vec4 vorPopcorn = popcorn_Frac(Pos/#vScale.r,#lrg_shp_iteration.r,#sml_shp_iteration.r,$octaves,#lacunarity.r,#octaveGain.r,#width.r,$widthAdd,lrg_shp_scale,#sml_shp_scale.r,#lrg_shp_amp.r,#sml_shp_amp.r,1,1)*vec4(Mid);

                vec4 colorA = mix($colorA,$colorB,float($invert));
                vec4 colorB = mix($colorB,$colorA,float($invert));


                switch ($vor_channel) // choosing the different channels (RGBA) to use from the popcorn function
                {
                    case 0:
                    default:
                    vor_channel = vorPopcorn.r;
                    softClip = softClip;

                    break;
                    case 1:
                    vor_channel = vorPopcorn.g;
                    break;
                    case 2:
                    vor_channel = vorPopcorn.b;
                    Threshold *= 2.0;
                    softClip = softClip * 2.0;
                    break;
                    case 3:
                    vor_channel = vorPopcorn.a - vorPopcorn.b;
                    Threshold *= 4.0;
                    softClip = (softClip + 0.5) * 6.0;
                    Mid = $Mid * 100;
                    break;

                }

                vor_channel = mix(vor_channel,clamp(vor_channel,0.0,1.0),float($clamp));

                // thresholding of result, clamping afterwards. This is for maximum displacement softness.
                float blend = softThreshold(Threshold,softClip,vor_channel);

                vec4 result = mix(colorA,colorB,blend);

                Output  = result;


                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>
