<!--
================================================================================
== Polysurface Curvature
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_PolySurfaceCurvature.xml
== Description: Polygon Surface curvature detection node.
================================================================================
== Author: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: May, 18 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>PolySurface Curvature</ID>
    <DefaultName>PolySurface Curvature</DefaultName>
    <Category>Geometry/Extension Pack/</Category>
    <Inputs>
        <Input Name="NormalMap"></Input>
        <Input Name="Curvature"></Input>
        <Input Name="MinVar" PrettyName="Min Curvature"></Input>
        <Input Name="Intensity"></Input>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="Adjust" PrettyName="Curvature" Group="" Type="double" Logarithmic="1" Min="0.0" Max="1.0">0.1</Attribute>
        <Attribute Name="MinVar" PrettyName="Min Curvature Variation" Group="" Type="double" Logarithmic="1" Min="0" Max="1">0.00</Attribute>
        <Attribute Name="Size" PrettyName="Intensity" Group="" Type="double" Logarithmic="1" Min="0.0" Max="2.0">0.1</Attribute>
        <Attribute Name="Invert" PrettyName="Invert" Group="" Type="bool" Min="false" Max="true">false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="MixNrm" PrettyName="Mix Normal Map" Group="Normal Map (Nodegraph Only)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
        <Attribute Name="Mode" PrettyName="Mode" Group="Normal Map (Nodegraph Only)" Type="userenum">Comp_MixRGBEncodedNormals,Comp_MixRGBEncodedNormals,Comp_AddRGBEncodedNormals,Comp_ReorientedNormalMappingRGBEncodedNormals,Mix Normals,Add Normals,Mix Reoriented Normals</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="absolute" PrettyName="Hard Edged" Group="Extra Attributes" Type="bool" Min="false" Max="true">false</Attribute>
        <Attribute Name="AO" PrettyName="Attenuate with AmbientOcclusion" Group="Extra Attributes" Type="bool" Min="false" Max="true">false</Attribute>
        <!--===============================================================================================================-->

    </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Curvature"><Pos>-70,-50</Pos></Input>
                <Input Name="MinVar"><Pos>0,-70</Pos></Input>
                <Input Name="Intensity"><Pos>70,-50</Pos></Input>
                <Input Name="NormalMap"><Pos>-120,0</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="NormalMap"><Default>vec4(9999.0)</Default></Input>
                <Input Name="Curvature"><Default>vec4($Adjust)</Default></Input>
                <Input Name="MinVar"><Default>vec4($MinVar)</Default></Input>
                <Input Name="Intensity"><Default>vec4($Size)</Default></Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                <Input Name="NormalMap"><Default>vec4(9999.0)</Default></Input>
                <Input Name="Curvature"><Default>vec4($Adjust)</Default></Input>
                <Input Name="MinVar"><Default>vec4($MinVar)</Default></Input>
                <Input Name="Intensity"><Default>vec4($Size)</Default></Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[


                #if defined MRI_SHADER_FRAGMENT || defined MRI_SHADER_TESS_EVALUATION


                // Initialize Attributes
                float INIT = $Adjust; INIT = $MinVar; INIT = $Size;

                float MixNormMip =  $MixNrm;
                vec4 N_4 = vec4(State.Normal,1.0);
                vec4 mix_nrm = $Mode(N_4,#NormalMap,MixNormMip);

                float Adj = #Curvature.r;
                float Si = #Intensity.r;

                // Checking if anything is attached to Nodegraph Handles
                vec3 N = ( #NormalMap == vec4(9999.0) ) ? N_4.rgb : mix_nrm.rgb ;


                vec3 P = State.Position;
                float AO = mix(1.0,State.AmbientOcclusion,float($AO));
                float hardEdge = float($absolute);


                float Size = AO*Si;
                float Adjust = AO*Adj;


                float size_pow = (pow(10000.0,Size*Size)-1.0) + 0.0001;


                float curvN = 0.0;
                float curvP = 0.0;


                float tuneCurvature = (Adjust*size_pow);
                curvN = length(fwidth(N)) ;
                curvN = (curvN >=#MinVar.r) ? curvN : 0.0;
                curvP = length(fwidth(P)) ;


                float mixer = clamp(curvN,0,1) / curvP;

                float curvature = clamp((mixer*tuneCurvature),0.0,1.0);
                curvature = mix(curvature,(softThreshold(0.5,0.0,curvature)),hardEdge);
                float inv_curv = 1.0 - curvature;


                float result = mix(curvature,inv_curv,float($Invert));
                result = clamp(result,0.0,1.0);

                Output = vec4(result,result,result,1.0);

                #endif


                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>
