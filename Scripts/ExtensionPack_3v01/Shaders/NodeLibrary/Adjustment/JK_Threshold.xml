<!--
================================================================================
== Threshold
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_Threshold.xml
== Description: Photoshop style threshold adjustment layer.
================================================================================
== Author: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: May 18, 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>Threshold</ID>
    <DefaultName>Threshold</DefaultName>
    <Category>Filter/Extension Pack/Histogram/</Category>
    <Tags>
        <Tag>_adjustment</Tag>
    </Tags>
    <Inputs>
        <Input Name="Input" PreferredInput='1'/>
        <Input Name="Threshold" ></Input>
        <Input Name="Edge" ></Input>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="Threshold" PrettyName="Threshold" Group="" Type="double" Min="0" Max="1">0.5</Attribute>
        <Attribute Name="Clip" PrettyName="Edge" Group="" Type="double" Min="0.001" Max="1">0.001</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Input" ><Pos>0,-50</Pos></Input>
                <Input Name="Threshold" ><Pos>-120,0</Pos></Input>
                <Input Name="Edge" ><Pos>120,0</Pos></Input>
            </Inputs>
        </Context>
            <Context Type="GLSL">
            <Shader>
                <Inputs>
                    <Input Name="Threshold"><Default>vec4($Threshold)</Default></Input>
                    <Input Name="Input"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="Edge"><Default>vec4($Clip)</Default></Input>
                </Inputs>
                <Body><![CDATA[

                float INIT = $Threshold; INIT = $Clip;

                vec4 threshold = vec4(#Threshold.rgb,1);
                vec4 bounds = vec4(#Edge.rgb,1)/2;
                vec4 edgeH = threshold + bounds;
                vec4 edgeL = threshold - bounds;
                vec4 _input = mriRgb2Hsv(#Input);

                _input = vec4(_input.r,0,_input.b,1);
                _input = mriHsv2Rgb(_input);

                vec4 _result = smoothstep(edgeL,edgeH,_input);
                vec4 result = vec4(_result.r,_result.g,_result.b,1.0);
                Output = result;

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>
