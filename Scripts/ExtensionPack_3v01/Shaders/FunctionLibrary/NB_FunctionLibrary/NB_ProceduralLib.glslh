////////////////////////////////////////////////////////////////////////////////
// Nicholas Breslow Mari Procedural Shader Library
// Copyright (c) 2015 Nicholas Breslow. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: NB_ProceduralLib.glslc
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////
// Author: Nicholas Breslow
// Web: www.nbreslow.com
// Email: nick@nbreslow.com
////////////////////////////////////////////////////////////////////////////////
// Modified Date: June 14, 2014
////////////////////////////////////////////////////////////////////////////////
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

// Utility Functions
float nb_sq(float x);

// Compute the UV rotation matrix
mat2 nb_uvRotation(float angle);

// Compute the UV repeat and offset on the UV Coords
vec2 nb_uvMod(vec2 uv, float repeat, vec2 uvRepeat, vec2 uvOffset);

// Compute a procedural 2D Dot pattern
float nb_dots2D(vec2 uv, float Scale);

// Compute a procedural 2D stripe pattern
float nb_stripes2D(vec2 uv, float Scale);

// Compute a procedural 2D super ellipse pattern
// Source: http://en.wikipedia.org/wiki/Superellipse
float nb_superEllipse2D(vec2 uv, float Scale, float Corner);

// Compute a procedural 2D super shape pattern
// Credit: "A generic geometric transformation that unifies a wide range of natural
// and abstract shapes" Gielis, Johan, American Journal of Botany 90 (3) p.333-338, 2003
// Source: http://www.amjbot.org/cgi/content/abstract/90/3/333
float nb_superShape2D(vec2 uv, float Scale, float angle, float a, float b, float m, float n1, float n2, float n3, out float gradient);

// Compute a procedural 2D weave shape pattern
void nb_superWeave2D(vec2 uv, float contrast, out float d0, out float d1, out float f0, out float f1);

// Functions for aliasing & smoothing
float nb_AAstep(float threshold, float varyingVal);

// Shading Functions
float nb_luminance(vec3 colorIn);
