#version 150

////////////////////////////////////////////////////////////////////////////////
// Nicholas Breslow Mari Brdf Shader Library
// Copyright (c) 2015 Nicholas Breslow. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: NB_BrdfLib.glslc
// Description: Shading library for various BRDF shading models.
////////////////////////////////////////////////////////////////////////////////
// Author: Nicholas Breslow
// Web: www.nbreslow.com
// Email: nick@nbreslow.com
////////////////////////////////////////////////////////////////////////////////
// Modified Date: June 14, 2014
////////////////////////////////////////////////////////////////////////////////
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

#define PI 3.1415

// Clamp value to 0...1 'float'
float nb_saturate(float v)
{
    return clamp(v,0.0,1.0);
}

// Computes the fresnel function using
// using the schlick approximation
float nb_fresnel(vec3 I, vec3 N, float eta)
{
   float VdotN = nb_saturate(dot(-I,N));
   float F0 = (1.0-eta)/(1.0+eta); F0 *= F0;
   float fresnel = F0 + (1.0 - F0) * pow(1.0 - VdotN, 5.0);

   return fresnel;
}

// Calculate the tangent and binormal from the input normal vector
void nb_tangentVectors(vec3 N, float anisotropicRotation, out vec3 X, out vec3 Y)
{
    // Tangent Direction
    vec3 anisoDirection = vec3(1.0 - anisotropicRotation,0.0 + anisotropicRotation,0.0);

    // Tangent and Bitangent
    X = normalize(cross(N,anisoDirection));
    Y = normalize(cross(N,X));
}

// Sample the environment texture for a latitude longitude
// map in the supplied direction for reflection mapping
vec3 nb_envLatMap2D(sampler2D sampler, vec3 dir)
{
    // Convert Dir To Spherical Coordinates
    float phi = 0.5 - atan(dir.z, -dir.x) / (2.0 * PI);
    float theta = 0.5 - asin(dir.y) / PI;
    vec2 uv = vec2(phi,theta);

    // Lookup In Equirectangular Map
    return texture(sampler,uv).xyz;
}

// Oren Nayar Diffuse
// "Generalization of Lambert's Reflectance Model" M. Oren and S.K. Nayar, SIGGRAPH p.239-246, July, 1994
// oren nayar diffuse variant implementation
float nb_orenNayar(vec3 I, vec3 N, vec3 L, float roughness)
{
    // Constant Variables
    float R = roughness*roughness;
    float A = 1.0 - 0.5 * (R / (R + 0.33));
    float B = 0.45 * R / (R + 0.09);

    // Incoming Angle Calculations
    float NdotI = nb_saturate(dot(N,I));
    float NdotL = nb_saturate(dot(N,L));

    // Oren Nayar Diffuse Core
    float theta_r = acos(NdotI);
    float theta_i = acos(NdotL);
    float cos_phi_diff = dot(normalize(I - N * NdotI), normalize(L - N * NdotL));

    // Alpha And Beta
    float alpha = max(theta_i,theta_r);
    float beta = min(theta_i,theta_r);

    // Cos Phi Calculation
    if (cos_phi_diff>=0)
    {
        B = B * sin(alpha) * tan(beta) * max(0.0,cos_phi_diff);
    }
    else
    {
        B = 0.0;
    }

    // Oren Nayar Diffuse
    return (NdotL * (A+B));
}

// Ward Anisotropic Specular
// "Measuring and Modelling Anisotropic Reflection" Gregory J. Ward, Computer Graphics 26, 2, July 1992
// Ward Anisotropic variant implementation
float nb_wardAnisotropic(vec3 N, vec3 I, vec3 L, vec3 X, vec3 Y, float SpecularRoughness, float Anisotropy)
{
    // Anisotropic Roughness Variables
    vec2 AnisoRoughness = vec2(SpecularRoughness, (SpecularRoughness / max(Anisotropy,0.001)));

    // Half-Vector
    vec3 H = normalize(L+I);

    // Dot Product Variables
    float NdotL = nb_saturate(dot(N,L));
    float NdotV = nb_saturate(dot(N,I));
    float NdotH = nb_saturate(dot(N,H));
    float HdotX = dot(H,X);
    float HdotY = dot(H,Y);

    // Ward Anisotropic Terms
    float FirstTerm = 1.0 / sqrt(clamp(NdotL*NdotV,0.01,1));
    float SecondTerm = 1.0 / (12.57 * AnisoRoughness.x * AnisoRoughness.y);
    float A = -2.0 * (pow((HdotX / AnisoRoughness.x),2) + pow((HdotY / AnisoRoughness.y),2));
    float B = 1.0 + NdotH;
    float ThirdTerm = exp(A / B);
    float ssNdotL = smoothstep(0,0.25,NdotL); // Optional Addition
    float Irradiance = max(0.0,ssNdotL);

    // Ward Anisotropic Specular
    float SpecTerm = FirstTerm * SecondTerm * ThirdTerm * Irradiance;

    return SpecTerm;
}

// Ward Isotropic Specular
// "Measuring and Modelling Anisotropic Reflection" Gregory J. Ward, Computer Graphics 26, 2, July 1992
// Ward Anisotropic variant implementation
float nb_wardIsotropic(vec3 N, vec3 I, vec3 L, float SpecularRoughness)
{
    // Half-Vector
    vec3 H = normalize(L+I);

    // Dot Product Variables
    float NdotL = nb_saturate(dot(N,L));
    float NdotV = nb_saturate(dot(N,I));
    float NdotH = nb_saturate(dot(N,H));

    // Ward Isotropic Terms
    float tan2NdotH = -pow(tan(acos(NdotH)),2);
    float RMS2 = pow(SpecularRoughness, 2);
    float Den = 6.28 * RMS2;
    float FirstTerm = exp(tan2NdotH/RMS2)/Den;
    float SecondTerm = 1.0/sqrt(clamp(NdotL*NdotV,0.1,1.0));
    float ssNdotL = smoothstep(0,0.25,NdotL); // Optional Addition
    float Irradiance = max(0.0,ssNdotL);

    // Ward Isotropic Specular
    float SpecTerm = FirstTerm * SecondTerm * Irradiance;

    return SpecTerm;
}
